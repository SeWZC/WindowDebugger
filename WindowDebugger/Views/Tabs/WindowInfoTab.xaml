<TabItem x:Class="WindowDebugger.Views.Tabs.WindowInfoTab"
         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
         xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
         xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
         xmlns:local="clr-namespace:WindowDebugger.Views.Tabs"
         xmlns:win32Enums="clr-namespace:Lsj.Util.Win32.Enums;assembly=Lsj.Util.Win32"
         xmlns:converters="clr-namespace:WindowDebugger.Converters"
         xmlns:utilconverters="clr-namespace:Lsj.Util.WPF.Converters;assembly=Lsj.Util.WPF"
         xmlns:markupExtensions="clr-namespace:Lsj.Util.WPF.MarkupExtensions;assembly=Lsj.Util.WPF"
         xmlns:viewmodels="clr-namespace:WindowDebugger.ViewModels"
         mc:Ignorable="d"
         d:DesignHeight="500" d:DesignWidth="500"
         d:DataContext="{d:DesignInstance Type=viewmodels:WindowItem}"
         Header="{Binding Content, RelativeSource={RelativeSource Self}, Mode=OneWay}">
    <ScrollViewer Padding="12 12 12 0">
        <FrameworkElement.Resources>
            <utilconverters:IntPtrToHexConverter x:Key="IntPtrToHexConverter"/>
            <converters:ParentWindowHandleToCanUpdateOwnerConverter x:Key="ParentWindowHandleToCanUpdateOwnerConverter"/>
            <converters:WindowItemToCanSetDisplayAffinityConverter x:Key="WindowItemToCanSetDisplayAffinityConverter"/>
            <Style TargetType="TextBlock">
                <Setter Property="VerticalAlignment" Value="Center"/>
            </Style>
        </FrameworkElement.Resources>
        <StackPanel>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1*" MaxWidth="150" SharedSizeGroup="WindowInfoHeader" />
                    <ColumnDefinition Width="2*"/>
                    <ColumnDefinition Width="2*" MinWidth="200"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <FrameworkElement.Resources>
                    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                        <Setter Property="Margin" Value="0 4" />
                        <Setter Property="TextWrapping" Value="Wrap" />
                        <Setter Property="BorderThickness" Value="0" />
                        <Setter Property="Background" Value="Transparent" />
                    </Style>
                </FrameworkElement.Resources>
                <Border Grid.Row="0" Grid.RowSpan="20" Grid.Column="2" BorderThickness="1" BorderBrush="{DynamicResource ControlElevationBorderBrush}"
                        HorizontalAlignment="Center" VerticalAlignment="Top" Margin="16 4 4 0" MaxHeight="320">
                    <Image Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="3" Source="{Binding Screenshot}" RenderOptions.BitmapScalingMode="Fant"/>
                </Border>
                <TextBlock Grid.Row="0" Grid.Column="0" Text="Window Handle"/>
                <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding WindowHandle, Converter={StaticResource IntPtrToHexConverter}, Mode=OneWay}" IsReadOnly="True"/>
                <TextBlock Grid.Row="1" Grid.Column="0" Text="Process"/>
                <TextBox Grid.Row="1" Grid.Column="1" IsReadOnly="True">
                    <MultiBinding StringFormat="{}{0} ({1})" Mode="OneWay">
                        <Binding Path="ProcessID" />
                        <Binding Path="ProcessName" />
                    </MultiBinding>
                </TextBox>
                <TextBlock Grid.Row="2" Grid.Column="0" Text="Thread ID"/>
                <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding ThreadID, Mode=OneWay}" IsReadOnly="True"/>
                <TextBlock Grid.Row="3" Grid.Column="0" Text="Class Name"/>
                <TextBox Grid.Row="3" Grid.Column="1" Text="{Binding ClassName, Mode=OneWay}" IsReadOnly="True"/>
                <TextBlock Grid.Row="4" Grid.Column="0" Text="DpiAwareness"/>
                <TextBox Grid.Row="4" Grid.Column="1" Text="{Binding DpiAwareness, Mode=OneWay}" IsReadOnly="True"/>
            </Grid>
            <Border Height="1" Background="{DynamicResource ControlElevationBorderBrush}" Margin="0 16" />
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="2*" MaxWidth="150" SharedSizeGroup="WindowInfoHeader"/>
                    <ColumnDefinition Width="5*"/>
                    <ColumnDefinition Width="*" MinWidth="80"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <FrameworkElement.Resources>
                    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                        <Setter Property="TextWrapping" Value="Wrap" />
                        <Setter Property="Margin" Value="0 4" />
                    </Style>
                    <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                        <Setter Property="Padding" Value="8 0" />
                        <Setter Property="Margin" Value="8 0 0 0" />
                        <Setter Property="Height" Value="32" />
                    </Style>
                    <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
                        <Setter Property="Margin" Value="0 4" />
                    </Style>
                </FrameworkElement.Resources>
                <TextBlock Grid.Row="0" Grid.Column="0" Text="Text"/>
                <TextBox Grid.Row="0" Grid.Column="1" x:Name="TextBoxText" Text="{Binding Text, UpdateSourceTrigger=Explicit}"/>
                <Button Grid.Row="0" Grid.Column="2" Click="UpdateText" Content="Change"/>
                <TextBlock Grid.Row="1" Grid.Column="0" Text="Rect (Screen)"/>
                <Grid Grid.Row="1" Grid.Column="1" x:Name="GridRect">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Row="0" Grid.Column="0" Text="Left" HorizontalAlignment="Center"/>
                    <TextBox Grid.Row="0" Grid.Column="1" x:Name="TextBoxRectLeft" Text="{Binding Left, Mode=OneWay}"/>
                    <TextBlock Grid.Row="0" Grid.Column="2" Text="Top" HorizontalAlignment="Center"/>
                    <TextBox Grid.Row="0" Grid.Column="3" x:Name="TextBoxRectTop" Text="{Binding Top, Mode=OneWay}"/>
                    <TextBlock Grid.Row="1" Grid.Column="0" Text="Width" HorizontalAlignment="Center"/>
                    <TextBox Grid.Row="1" Grid.Column="1" x:Name="TextBoxRectWidth" Text="{Binding Width, Mode=OneWay}"/>
                    <TextBlock Grid.Row="1" Grid.Column="2" Text="Height" HorizontalAlignment="Center"/>
                    <TextBox Grid.Row="1" Grid.Column="3" x:Name="TextBoxRectHeight" Text="{Binding Height, Mode=OneWay}"/>
                </Grid>
                <Button Grid.Row="1" Grid.Column="2" Click="UpdateRect" Content="Change"/>
                <TextBlock Grid.Row="2" Grid.Column="0" Text="WindowShowStates"/>
                <ComboBox Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" x:Name="ComboBoxWindowShowStates"
                          SelectedValue="{Binding WindowShowStates, Mode=TwoWay}"
                          ItemsSource="{markupExtensions:EnumToItemSource {x:Type win32Enums:ShowWindowCommands}}"
                          DisplayMemberPath="DisplayName" SelectedValuePath="Value"/>
                <TextBlock Grid.Row="3" Grid.Column="0" Text="WindowShowStates"/>
                <ComboBox Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="2" x:Name="ComboBoxWindowDisplayAffinities"
                          SelectedValue="{Binding WindowDisplayAffinity, Mode=TwoWay}"
                          ItemsSource="{markupExtensions:EnumToItemSource {x:Type win32Enums:WindowDisplayAffinities}}"
                          IsEnabled="{Binding Converter={StaticResource WindowItemToCanSetDisplayAffinityConverter}}"
                          DisplayMemberPath="DisplayName" SelectedValuePath="Value"/>
                <TextBlock Grid.Row="4" Grid.Column="0" Text="Parent Window"/>
                <TextBox Grid.Row="4" Grid.Column="1" x:Name="TextBoxParentWindowHandle" Text="{Binding ParentWindowHandle, Converter={StaticResource IntPtrToHexConverter}, UpdateSourceTrigger=Explicit}"/>
                <Button Grid.Row="4" Grid.Column="2" Click="UpdateParentWindowHandle" Content="Change"/>
                <TextBlock Grid.Row="5" Grid.Column="0" Text="Owner Window"/>
                <TextBox Grid.Row="5" Grid.Column="1" x:Name="TextBoxOwnerWindowHandle" Text="{Binding OwnerWindowHandle, Converter={StaticResource IntPtrToHexConverter}, UpdateSourceTrigger=Explicit}"/>
                <Button Grid.Row="5" Grid.Column="2" Click="UpdateOwnerWindowHandle" Content="Change"
                    IsEnabled="{Binding ParentWindowHandle,Converter={StaticResource ParentWindowHandleToCanUpdateOwnerConverter}}"/>
            </Grid>
        </StackPanel>
    </ScrollViewer>
</TabItem>
